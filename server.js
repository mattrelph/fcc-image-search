 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

//Image search abstraction layer at ./api/imagesearch/
/*We will be returning imgur data
- URL - Direct link to the image fileCreatedDate
- Snippet - Image Alt description
- Thumbnail - Link to image thumbnail
- Context - Page that contains the picture	
- Viewing 10 results at a time
- Add an offset '?offset=#' and we will skip ahead in the results by 10 * #
*/
app.get('/api/imagesearch/:query', function(req, res) 
{
	var query = req.params.query;
	var offset = 1;
	if (req.query.offset)
	{
		offset = (10* req.query.offset - 9);
	}
	var response="";
	console.log("No problems so far!", query, "-", offset);

	insertSearch (query, response);

	httpsGet(query, offset, res);

});	
	
//Results of searches at ./api/imagesearch/ in ./api/latest/imagesearch/
/*
- Term - Search terms being used
- When - Time of search
- Stored in a MongoDB
- Returns last 10 searches
*/	
app.get('/api/latest/imagesearch/', function(req, res) 
{
	var MongoClient = require('mongodb').MongoClient;
	MongoClient.connect(process.env.dbURL, function(err, db) 	//connect to databse
	{
		if (err) 
		{
			res.end('{"error" : "Cannot connect to database."}');
			console.log("DB error - Connect - " + err);
		}
		else
		{	
			//Check how many records we have. Should be max of 10
			var collection = db.collection("fcc-image-search");
			var dbQuery = { term: { $exists: true} };
			
			collection.find(dbQuery).toArray(function(err, searchRes) 
			{
				if (err) 
				{
					res.end('{"error" : "Cannot read database."}');
					console.log("DB error - Search -" + err); 
											
				}
				else
				{
					var output = searchRes;
					output.forEach(function(element) 
					{
						delete element["_id"];
					});
					res.end(JSON.stringify(output));
				}
				db.close();
			});
		}
	});
});
	
	
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

function httpsGet (query, offset, result)
{
	var url = process.env.searchURL + query  +"&start=" + offset;
	var output=[];
	console.log('Sending search request...');
	
	var web = require('https');
	web.get(url, res => 
	{
		res.setEncoding("utf8");
		let body = "";
		res.on("error", error => 
		{
			console.log('Request error: ', error);
			output.push({"error":"GET Request failed - "  + error});
			result.end(JSON.stringify(output));
		});
		res.on("data", data => 
		{
			body += data;
			//console.log(data);
		});
		res.on("end", () => 
		{
			//body = JSON.parse(body);
			if (body == "error")
			{
				output.push({"error":"Error - Maxed-out daily search quota?"});
				console.log("Error - Maxed-out daily search quota?");				
			}
			else if (body =="")
			{
				output.push({"error":"No search results. Offset too high?"});
				console.log("No search results. Offset too high?");					
			}
			else
			{
				
				var jsonResponse = JSON.parse(body);
				jsonResponse = jsonResponse.items;
				//console.log(jsonResponse.length, Array.isArray(jsonResponse));
				console.log('Parsing search data...');
				//output = jsonResponse;
				jsonResponse.forEach(function(element) 
				{
					//Build a new object. Got to check that the response has the right fields, though. The Google API doesn't always return uniform fields.
					var newObj =({"url": "", "snippet": "" ,"thumbnail": "","context": ""});
					if (element.hasOwnProperty('pagemap'))
					{
						if (element.pagemap.hasOwnProperty('cse_image'))
						{
							newObj.url = element.pagemap.cse_image[0].src;
						}
						if ( element.pagemap.hasOwnProperty('cse_thumbnail'))
						{
							newObj.thumbnail = element.pagemap.cse_thumbnail[0].src;
						}
						else if (element.pagemap.hasOwnProperty('thumbnail'))
						{
							newObj.thumbnail = element.pagemap.thumbnail[0].src;
						}
					}
					
					if (element.hasOwnProperty('title'))
					{
						newObj.snippet = element.title;
					}
					else if (element.hasOwnProperty('snippet'))
					{
						newObj.snippet = element.snippet;
					}
					
					if (element.hasOwnProperty('link'))
					{
						newObj.context=element.link;
					}
					
					output.push (newObj);
					console.log('Done parsing.');  //Looks like we made it.
				});				
			}
			result.end(JSON.stringify(output)); //Send results or errors off to userland.
		});	
	});

}

function insertSearch (query, response)
{
	var MongoClient = require('mongodb').MongoClient;
	MongoClient.connect(process.env.dbURL, function(err, db) 	//connect to databse
	{
		if (err) 
		{
			response = '{"error" : "Cannot connect to database."}';
			console.log("DB error - Connect - " + err);
		}
		else
		{	
			//Check how many records we have. Should be max of 10
			var collection = db.collection("fcc-image-search");
			var dbQuery = { term: { $exists: true} };
			
			collection.find(dbQuery).toArray(function(err, searchRes) 
			{
				if (err) 
				{
					response = '{"error" : "Cannot read database."}';
					console.log("DB error - Search -" + err); 
					db.close();							
				}
				else
				{
					//If more than 10, delete earliest record. Then insert new record
					var time = new Date(Date.now());
					var myObj = {"term" : query, "when" : time.toISOString()}; 
					if (searchRes.length > 9)
					{
						var deleteQuery = {'_id' : searchRes[0]['_id']}	;	//Should be the earliest entry in the DB
						console.log("Deleting", JSON.stringify(deleteQuery));
						collection.remove(deleteQuery, function(err, deleteRes) 	//Delete, then insert
						{
							if (err) 
							{
								response = '{"error" : "Cannot delete database item."}';
								console.log("DB error - Insert -" + err); 
								db.close();							
							}
							else
							{
							   collection.insert(myObj, function(err, insertRes) 
							   {
									if (err) 
									{
										response = '{"error" : "Cannot write to database."}';
										console.log("DB error - Insert -" + err); 
																
									}
									else
									{
										console.log("Inserted", JSON.stringify(myObj));
									}
									db.close();	
									
							  }); 									
							}
						});						
					}
					else
					{
					   collection.insert(myObj, function(err, insertRes) 		//Just insert
					   {
							if (err) 
							{
								response = '{"error" : "Cannot write to database."}';
								console.log("DB error - Insert -" + err); 
														
							}
							else
							{
								console.log("Inserted", JSON.stringify(myObj));
							}
							db.close();	
					  }); 	
					}
				}
			});
			
			
			
		}
	});
}